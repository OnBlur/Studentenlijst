@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
	<script src="~/Scripts/materialize.min.js"></script>
}

@{
    Layout = "~/_SiteLayoutLogin.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/");
    }

    // Setup validation
    Validation.RequireField("email", "Vul email in");
    Validation.RequireField("password", "Vul wachtwoord in");

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (Validation.IsValid()) {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(email, password, rememberMe)) {
                Context.RedirectLocal(returnUrl);
                return;
            } else {
                ModelState.AddFormError(null);
            }
        }
    }
}

<div class="col s12 z-depth-4 card-panel">
    <form method="post" class="login-form" enctype="multipart/form-data">
        @AntiForgery.GetHtml()
        @* If one or more validation errors exist, show an error *@
        @Html.ValidationSummary("Log in was unsuccessful.", excludeFieldErrors: true, htmlAttributes: null)
        <!--Logo-->
        <div class="row">
			<div class="input-field col s12 center">
				<img src="~/Images/nhl.png" alt="foto" class="responsive-img valign profile-image-login">
				<p class="center login-form-text">Studentenlijst</p>
			</div>
		</div>
        <!--Email input field-->
        <div class="row margin">
			<div class="input-field col s12">
				<i class="material-icons prefix">email</i>
                <input type="text" id="email" name="email" value="@email" @Validation.For("email")/>
                <label for="email" class="center-align" @if (!ModelState.IsValidField("email")) {<text>class="error-label"</text>}>Email address</label>
                @Html.ValidationMessage("email")
			</div>
		</div>
        <!--Password input field-->
        <div class="row margin">
			<div class="input-field col s12">
				<i class="material-icons prefix">lock</i>
				<input type="password" id="password" name="password" @Validation.For("password")/>
				<label for="password" @if (!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password</label>
                @Html.ValidationMessage("password")
			</div>
		</div>
        <!--Remember me checkbox-->
        <div class="row">          
			<div class="input-field col s12 m12 login-text">
                <input type="checkbox" id="remember-me" name="rememberMe" value="true" checked="@rememberMe" />
				<label class="checkbox" for="remember-me">Remember me?</label>
			</div>
		</div>
        <!--Login button-->
        <div class="row">
			<div class="input-field col s12">
                <button class="btn waves-effect waves-light col s12" type="submit" name="action">Login</button>
			</div>
		</div>
    </form>
</div>
